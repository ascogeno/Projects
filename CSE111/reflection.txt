Please respond thoroughly (at least two sentences for each question) to
the following three questions.

1. Describe an experience you had this semester where you saw the power of
functions.

Oddly enough, it was during my final project that I saw a utility for functions that I previously hadn't
My final project utilized a lot of if statements regarding Boolean values generated from user responses, a lot of which was very repetitive
I realized it wasn't very optimized, so I asked ChatGPT for suggestions on how to clean up my main(). What it did was create a seperate function specifically designed
to handle the "Yes"s and "No"s from the user and give appropriate Boolean output. What took my maybe 15-20 lines of arbitrary and ugly code was instead condensed into 5 
lines, not counting the calls to that function. I always knew functions could have organize code, but seeing how much better *my* code can be with appropriate functions was
eye opening

2. In your judgment, what is the value of test functions?

The value of test functions is in the time it saves us from checking the output manually. If you've worked out what the output is supposed to be for a given function with 
given values, making sure they give those expected outputs saves a lot of time and frustration. It's also eye-opening in the sense that there were several times
I thought I had appropriately worked out what the output should be for a function I wrote but I was in fact WRONG. And I was able to see why I was wrong. Test functions provide
another means whereby we can better understand our own (or others) code.

3. Describe your process for troubleshooting and fixing a program that
has a problem. What is one thing you can do to improve your process?

It most certainly isn't efficient, but I run the program to see what happens first. But I run it after I'm sure it should work, while expecting errors. I've completed my work 
to the best of my knowledge, is what I mean in essense. Once I see that the program failed to execute properly, then I look into the 
line that the error message gives me. Most of the time, it's a typo that I can see very clearly and fix. I work through these more obvious issues until I reach 
problems that come from the program not resolving properly. The python debugger and Break points become useful for this, since it gives a detailed view at what 
values are being held by my variables and a good look at what's going wrong. If my function isn't written properly, this is usually where I'll catch it.

Lately, I've also been trying out ChatGPT and Claude's ability to analyze my code and tell me why it isn't functioning properly. This I use for when the problem isn't 
immediatley apparent, and looking up the problem with google to view other's documentation fails me. 

One thing I can do to improve my process is involving others. I use ChatGPT as a last resort since I view getting help as a last resort, when in reality the speed by 
which things can get done is much faster with others. 